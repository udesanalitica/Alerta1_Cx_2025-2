---
title: "Sección 3. Salud integral"
---

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(readxl)
Data20252 <- read_excel("C:/R-Proyectos/Alerta1_Cx_2025-2/data/Data20252.xlsx")
View(Data20252)
datos<- Data20252
attach(datos)
# head(datos)
# str(datos)
# names(datos)
```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Librerias necesarias
#install.packages(c("ggplot2", "psych", "skimr", "summarytools", "corrplot", "ggpubr"))
library(ggplot2)
library(psych)
library(skimr)
library(summarytools)
library(corrplot)
library(tidyr)
library(RColorBrewer)
library(ggpubr)
library(plotly)
library(lattice)
library(Hmisc)
library(skimr)
library(summarytools)
library(base)
library(ggpubr)
library(scales)
library(dplyr)
library(ggrepel)
library(tidyverse)
library(scales)
library(tm)
library(SnowballC)
library(wordcloud2)
library(RColorBrewer)
```

```{r, message=FALSE, warning=FALSE, echo=FALSE}
## Convertir las variables caracter a factor
# Lista de columnas que se convertirán en factores
cols_factor <- c(
  "tipo_doc", "genero", "depto", "ciudad", "barrio", "estrato...12",
  "colegio", "salud", "programa", "pensum", "jornada", "campus", 
  "prog_acad", "sexo_id", "pais", "est_civ", "ciu_orig", "desemp_aca", 
  "leng_ext", "cert_leng", "ingles", "frances", "portug", "aleman", 
  "italiano", "otra_leng", "matema", "comp_lec", "expr_oral", "acompa", 
  "tipo_acomp", "memoria", "comp", "adaptac", "atencion", "analisis", 
  "hab_pub", "est_orat", "expr_amig", "comp_nvos", "transp_hab", 
  "combust", "transp_comp", "comp_dispo", "tip_familia", "grupo_pobl", 
  "grupo_pert", "grupo_etn", "etnia_ind", "pago_sem", "eligio_udes", 
  "prim_univ", "niv_padre", "niv_madre", "internet", "tv_suscrip", 
  "esp_estud", "jorn_univ", "trab_padre", "trab_madre", "bienes_hog", 
  "remunera", "sit_ec_hog", "sust_psic", "tipo_psic", "ayuda_psic", 
  "tipo_ayuda", "fuma", "mot_fuma", "otra_resp", "alcohol", "mot_alc", 
  "ocas_alc", "anticoncep", "tipo_antc", "id_gen", "gen_otro", 
  "orient_sex", "otra_orsex", "enf_diag", "tipo_enf", "medic_enf", 
  "discap", "tipo_disc", "arte_atra", "hab_art", "tipo_art", 
  "aprend_art", "dia_art", "amb_prac", "act_fisica", "lectura", 
  "deporte", "tipo_dep", "otros_dep", "salud_ment", "apoyo_fam", 
  "red_apoyo", "pareja", "rel_pareja", "rel_padres", "fam_origen", 
  "fam_formada"
)

# Convertir solo las columnas que realmente existen
cols_existentes <- intersect(cols_factor, names(datos))
datos[cols_existentes] <- lapply(datos[cols_existentes], as.factor)
```

::: {.callout-warning title="Aclaración importante"}
En los gráficos y filtros, el nombre Cúcuta aparecerá como Cucuta.
:::

## Sesión. Salud integral

## Alimentación

### ¿Cuántas veces come al día?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los estudiantes (78.5%) reportan consumir alimentos entre 3 y 5 veces al día. Un 18.8% lo hace solo entre 1 y 2 veces al día, y un porcentaje reducido (2.7%) lo hace más de 5 veces al día. Esto indica una frecuencia alimentaria adecuada en la mayoría, aunque hay un grupo que podría estar en riesgo nutricional por baja frecuencia.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuántas veces come al día?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(comidas_dia), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, comidas_dia) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(comidas_dia)) %>%
  count(comidas_dia, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~comidas_dia,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+120,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución cuántas veces come al día por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuántas veces por semana consumen los siguientes alimentos en su hogar? (carne, pollo, pavo, res, cordero, cerdo, conejo, pescado o huevos, etc)

::: {.callout-note title="Descripción para todos los campus"}
Casi el 30% de los estudiantes consume proteína animal casi todos los días, seguido de un 27.3% que lo hace todos los días. El 24% lo hace entre 3 y 5 veces por semana. Un grupo menor presenta un consumo reducido: 17.7% lo hace solo 1 a 2 veces por semana y 1.5% nunca o rara vez. Esto refleja una tendencia general a consumir proteína animal regularmente, aunque hay un grupo con baja frecuencia.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuántas veces por semana consumen los siguientes alimentos en su hogar? (carne, pollo, pavo, res, cordero, cerdo, conejo, pescado o huevos, etc)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(alim_carn), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, alim_carn) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(alim_carn)) %>%
  count(alim_carn, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~alim_carn,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+120,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución consumo por semana de \nproteína animal por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuántas veces por semana consumen los siguientes alimentos en su hogar? Cereales (avena, granola), frutos secos (almendras, maní) o legumbres (fríjoles, garbanzos, lentejas)

::: {.callout-note title="Descripción para todos los campus"}
El 36.9% de los estudiantes consume proteína vegetal entre 1 a 2 veces por semana. Un 26.2% lo hace entre 3 y 5 veces por semana, mientras que el 17.5% casi todos los días y el 9.75% todos los días. Un 9.6% reporta no consumirla o hacerlo rara vez. Aunque hay consumo frecuente en una parte del grupo, destaca la necesidad de promover una mayor ingesta regular de proteína vegetal.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Cuántas veces por semana consumen los siguientes alimentos en su hogar? Cereales (avena, granola), frutos secos (almendras, maní)o legumbres (fríjoles, garbanzos, lentejas)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(alim_cere), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, alim_cere) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(alim_cere)) %>%
  count(alim_cere, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~alim_cere,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución consumo por semana de \nproteína vegetal por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Actividad laboral de los padres y trabajo del estudiante

### Señale aquella labor que sea más similar al trabajo que realizó su padre durante la mayor parte del último año.

::: {.callout-note title="Descripción para todos los campus"}
Las ocupaciones paternas más comunes incluyen el trabajo como profesional (por ejemplo, médico o ingeniero), seguido por la propiedad de negocios medianos o pequeños y oficios técnicos como operarios o conductores. También hay una proporción considerable de estudiantes que no saben o no aplican la pregunta. La diversidad en la ocupación paterna muestra un perfil socioeconómico variado.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la tipologia familiar de origen?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(trab_padre) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, trab_padre) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(trab_padre)) %>%
  count(trab_padre, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'trab_padre' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(trab_padre)

datos_final <- datos_final %>%
  mutate(trab_padre = factor(trab_padre, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", trab_padre, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~trab_padre,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
  title = "Distribución trabajo del padre \n por campus",
  xaxis = list(
    title = "Tipología familiar de origen",
    tickangle = -45  # Inclina las etiquetas en el eje X para mejor visualización
  ),
  yaxis = list(title = "Número de estudiantes"),
  updatemenus = list(
    list(
      type = 'dropdown',
      active = 0,
      buttons = lapply(niveles_campus, function(c) {
        list(method = "restyle",
             args = list("transforms[0].value", c),
             label = c)
      })
    )
  )
)

fig

```

### Señale aquella labor que sea más similar al trabajo que realizó su madre durante la mayor parte del último año.

::: {.callout-note title="Descripción para todos los campus"}
Predomina el trabajo en el hogar o que no trabaja, seguido por ocupaciones profesionales y trabajos en negocios propios. Esto sugiere una participación laboral femenina menor que la paterna y refuerza patrones tradicionales de distribución del trabajo por género.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y Señale aquella labor que sea más similar al trabajo que realizó su madre durante la mayor parte del último año.
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(trab_madre) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, trab_madre) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(trab_madre)) %>%
  count(trab_madre, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'trab_padre' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(trab_madre)

datos_final <- datos_final %>%
  mutate(trab_madre = factor(trab_madre, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", trab_madre, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~trab_madre,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
  title = "Distribución trabajo del madre \n por campus",
  xaxis = list(
    title = "Tipología familiar de origen",
    tickangle = -45  # Inclina las etiquetas en el eje X para mejor visualización
  ),
  yaxis = list(title = "Número de estudiantes"),
  updatemenus = list(
    list(
      type = 'dropdown',
      active = 0,
      buttons = lapply(niveles_campus, function(c) {
        list(method = "restyle",
             args = list("transforms[0].value", c),
             label = c)
      })
    )
  )
)

fig

```

### ¿Cuáles de los siguientes bienes hay en su hogar?

::: {.callout-note title="Descripción para todos los campus"}
En esta nube de palabras destacan términos como "horno", "lavadora", "máquina", "ropa", y "gas", lo cual indica que estos elementos son comunes en los hogares de los encuestados. También se identifican bienes de valor como "automóvil", "moto", y artículos de entretenimiento como "consola", "xbox", "nintendo" y "playstation", aunque con menor frecuencia. Esto sugiere una diversidad en la disponibilidad de bienes, desde necesidades básicas hasta elementos de ocio.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Instala y carga las librerías necesarias
if(!require(tm)) install.packages("tm", dependencies = TRUE); library(tm)
if(!require(SnowballC)) install.packages("SnowballC", dependencies = TRUE); library(SnowballC)
if(!require(wordcloud2)) install.packages("wordcloud2", dependencies = TRUE); library(wordcloud2)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dependencies = TRUE); library(RColorBrewer)

# ✅ Extraer la variable bienes_hog como texto
text <- paste(na.omit(datos$bienes_hog), collapse = " ")

# ✅ Crear el corpus
docs <- Corpus(VectorSource(text))

# ✅ Limpieza del texto
toSpace <- content_transformer(function (x, pattern) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
docs <- tm_map(docs, toSpace, "'")
docs <- tm_map(docs, toSpace, "`")

docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("spanish")) 
docs <- tm_map(docs, stripWhitespace)

# ✅ Eliminar palabras poco informativas según tu contexto
docs <- tm_map(docs, removeWords, c("hogar", "tiene", "con", "sin", "ninguno", "ninguna", "etc", "hogar", "tiene", "con", "sin", "ninguno", "ninguna", "por", "porque", "la", "el", "en", "de", "para", "con", "una", "un", "es", "son", "fue", "muy", "más", "menos", "solo", "no", "mi", "los", "las", "del", "al", "se", "su", "sus", "como", "pero", "que", "le", "udes", "universidad", "santander"))

# ✅ Eliminar caracteres especiales preservando tildes y ñ
removeSpecialChars <- function(x) gsub("[^a-zA-ZáéíóúÁÉÍÓÚñÑ0-9 ]", "", x)
docs <- tm_map(docs, content_transformer(removeSpecialChars))

# ✅ Crear matriz de términos y frecuencias
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)

# ✅ Generar la nube de palabras
wordcloud2(d, color = "random-light", backgroundColor = "white")

```

### ¿Cuántas horas remuneradas trabajó usted la semana pasada?

::: {.callout-note title="Descripción para todos los campus"}
El 42.9% de los estudiantes no realiza trabajo remunerado, mientras que el 32% respondió "no aplica". Un porcentaje menor (10.) trabaja menos de 10 horas o más de 30 horas semanales. Esto indica que la mayoría no realiza actividades laborales, lo cual puede estar relacionado con dedicación exclusiva a estudios o falta de oportunidades laborales.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuántas horas remuneradas trabajó usted la semana pasada?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(horas_sem) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, horas_sem) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(horas_sem)) %>%
  count(horas_sem, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'horas_sem' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(horas_sem)

datos_final <- datos_final %>%
  mutate(horas_sem = factor(horas_sem, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", horas_sem, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~horas_sem,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución horas remuneradas de \ntrabajó por campus",
    xaxis = list(title = "Horas remuneradas de trabajó"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Usted recibe algún tipo de remuneración por trabajar?

::: {.callout-note title="Descripción para todos los campus"}
El 73.6% no recibe remuneración laboral. El 24.2% recibe pago en efectivo y menos del 2.5% recibe algún tipo de remuneración en especie o mixta. Esto refuerza el hallazgo previo sobre baja proporción de estudiantes que trabajan y reciben ingresos.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Usted recibe algún tipo de remuneración por trabajar?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(remunera), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, remunera) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(remunera)) %>%
  count(remunera, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~remunera,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 135+40,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tipo de remuneración \npor el trabajó por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Con respecto al año pasado, la situación económica de su hogar es:

::: {.callout-note title="Descripción para todos los campus"}
El 61.2% de los estudiantes considera que su situación económica no ha cambiado respecto al año anterior. Un 33.1% percibe una mejoría, y solo el 5.7% considera que ha empeorado. Esto indica estabilidad económica en la mayoría de los hogares y un panorama positivo general.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Con respecto al año pasado, la situación económica de su hogar es:
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(sit_ec_hog), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, sit_ec_hog) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(sit_ec_hog)) %>%
  count(sit_ec_hog, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~sit_ec_hog,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 135+40,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución situación económica de su hogar \nrespecto al año anterior por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Sustanacias psicoactivas

### ¿Consume algún tipo de sustancia psicoactiva?

::: {.callout-note title="Descripción para todos los campus"}
El 99.5% de los estudiantes reporta no haber consumido sustancias psicoactivas, lo cual es un hallazgo positivo en términos de salud pública. Solo un 0.5% reconoce consumo, lo cual representa una proporción marginal dentro de la muestra.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Consume algún tipo de sustancia psicoactiva?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(sust_psic), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, sust_psic) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(sust_psic)) %>%
  count(sust_psic, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~sust_psic,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución consumo de sustancias \npsicoactivas por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuál fue la edad de inicio de consumo de sustancias psicoactivas?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los estudiantes que reportan consumo de sustancias psicoactivas iniciaron entre los 14 y 16 años (50%). Un 33.3% comenzó entre los 17 y 19 años, mientras que un 16.7% empezó antes de los 13 años. Estos datos indican que el inicio del consumo suele darse en la adolescencia media, lo cual es un periodo de mayor vulnerabilidad y riesgo conductual.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuál fue la edad de inicio de consumo de sustancias psicoactivas?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(edad_psic), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, edad_psic) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(edad_psic)) %>%
  count(edad_psic, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~edad_psic,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución edad de inicio del consumo de \nsustancias psicoactvas por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Qué tipo de sustancia psicoactiva consume?

::: {.callout-note title="Descripción para todos los campus"}
Entre los estudiantes que consumen sustancias psicoactivas, el 50% reporta el uso de cannabis (marihuana), y el otro 50% menciona otras sustancias sin especificar.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Qué tipo de sustancia psicoactiva consume?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tipo_psic), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tipo_psic) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tipo_psic)) %>%
  count(tipo_psic, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tipo_psic,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tipo de sustancia psicoactiva \nque consume por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Ha recibido orientación o ayuda profesional o especializada para superar la situación del consumo de sustancias psicoactivas y mitigar los riesgos y daños asociados al mismo?

::: {.callout-note title="Descripción para todos los campus"}
Dos de cada tres estudiantes (66.7%) que consumen sustancias psicoactivas no han recibido orientación o ayuda profesional, mientras que un tercio (33.3%) sí lo ha hecho. Esta baja proporción de acompañamiento profesional evidencia una posible barrera en el acceso o solicitud de servicios de salud mental y apoyo psicosocial.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Ha recibido orientación o ayuda profesional o especializada para superar la situación del consumo de sustancias psicoactivas y mitigar los riesgos y daños asociados al mismo?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(ayuda_psic), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, ayuda_psic) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(ayuda_psic)) %>%
  count(ayuda_psic, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~ayuda_psic,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tipo de \nayuda recibida por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Tipo de ayuda recibido para superar el consumo de sustancias psicoactivas

::: {.callout-note title="Descripción para todos los campus"}
La palabra "ninguna" aparece como la más frecuente, lo que indica que muchas personas no han tenido una experiencia institucional previa. También se observan menciones a entornos "familiares" y "centro de binestar", lo cual sugiere que, en los casos donde sí hubo experiencia, esta estuvo relacionada con instituciones de atención familiar o de paso temporal.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Tipo de ayuda recibido para superar el consumo de sustancias psicoactivas
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tipo_ayuda), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tipo_ayuda) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tipo_ayuda)) %>%
  count(tipo_ayuda, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tipo_ayuda,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 135,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución si ha recibido orientación o \nayuda profesional por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

## Consumo de Cigarrillo: Hábitos y Motivaciones

### ¿Usted fuma cigarrillo?

::: {.callout-note title="Descripción para todos los campus"}
El 99.3% de los estudiantes indica que no fuma cigarrillo, y solo el 0.7% afirma que sí lo hace. Esto sugiere que el hábito de fumar cigarrillo es poco frecuente en la población estudiada.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Usted fuma cigarrillo?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(fuma), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, fuma) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(fuma)) %>%
  count(fuma, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~fuma,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de fuma cigarrillo por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Edad en la que empezó a fumar

::: {.callout-note title="Descripción para todos los campus"}
Entre quienes fuman, las edades más comunes de inicio son los 14, 15 y 17 años, con un 22.2% cada una. En menor proporción, algunos iniciaron a los 16, 18 o 19 años (11.1% cada uno). Esta información señala que el inicio del consumo de tabaco también ocurre típicamente en la adolescencia temprana o media.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y Edad de inicio del consumo de alcohol por primera vez
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(edad_fuma) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, edad_fuma) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(edad_fuma)) %>%
  count(edad_fuma, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'edad_fuma' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(edad_fuma)

datos_final <- datos_final %>%
  mutate(edad_fuma = factor(edad_fuma, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", edad_fuma, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~edad_fuma,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución edad de inicio del consumo de \ncigarrillo por campus",
    xaxis = list(title = "Edad de inicio del consumo de cigarrillo"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Cuál fue el motivo por el cual probó por primera vez el cigarrillo?

::: {.callout-note title="Descripción para todos los campus"}
El motivo más frecuente por el que los estudiantes probaron cigarrillos fue la curiosidad o iniciativa propia (55.6%). El 22.2% lo hizo por sentimientos de tristeza o aburrimiento, y el resto por imitación de conductas familiares u otras razones (11.1% cada una). Esto sugiere que el entorno emocional y la búsqueda de nuevas experiencias juegan un papel importante en el inicio del consumo.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuál fue el motivo por el cual probó por primera vez el cigarrillo?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(mot_fuma), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, mot_fuma) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(mot_fuma)) %>%
  count(mot_fuma, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~mot_fuma,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 235,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución motivo por el cual probó por primera \nvez el cigarrillo por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuántos cigarrillos fuma diariamente?

::: {.callout-note title="Descripción para todos los campus"}
Todos los estudiantes que indicaron fumar consumen entre 1 y 2 cigarrillos al día. Este patrón sugiere un consumo de baja intensidad entre quienes fuman actualmente.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuántos cigarrillos fuma diariamente?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(cig_dia), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, cig_dia) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(cig_dia)) %>%
  count(cig_dia, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~cig_dia,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución Cuántos cigarrillos fuma \ndiariamente por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

## Hábitos con el alcohol

### ¿Usted consume alcohol normalmente?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los estudiantes encuestados manifestó no consumir alcohol, representando el 94.8% del total. Solo el 5.2% reportó que sí lo hace. Esto indica que el consumo de alcohol es poco frecuente dentro de la muestra evaluada.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Usted consume alcohol normalmente?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(alcohol), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, alcohol) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(alcohol)) %>%
  count(alcohol, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~alcohol,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución consumo de alcohol por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Edad de inicio del consumo de alcohol por primera vez

::: {.callout-note title="Descripción para todos los campus"}
Las edades más comunes de inicio del consumo de alcohol se concentran entre los 16, 17 y 18 años. Hay casos aislados de inicio desde los 11 años y hasta los 20. La tendencia muestra que el primer contacto con el alcohol se da principalmente en la adolescencia media.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y Edad de inicio del consumo de alcohol por primera vez
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(edad_alc) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, edad_alc) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(edad_alc)) %>%
  count(edad_alc, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'edad_alc' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(edad_alc)

datos_final <- datos_final %>%
  mutate(edad_alc = factor(edad_alc, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", edad_alc, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~edad_alc,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución edad de inicio del consumo de \nalcohol por primera vez por campus",
    xaxis = list(title = "Edad de inicio del consumo de alcohol"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Cuál fue el motivo por el cual probó por primera vez el alcohol?

::: {.callout-note title="Descripción para todos los campus"}
El 71.2% de los estudiantes que han probado alcohol indicaron que lo hicieron por curiosidad o iniciativa propia. Un 27.3% mencionó otras razones y solo un 1.5% lo hizo por imitación de conductas familiares. Esto sugiere que la decisión fue principalmente individual, más que influenciada por el entorno familiar.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuál fue el motivo por el cual probó por primera vez el alcohol?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(mot_alc), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, mot_alc) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(mot_alc)) %>%
  count(mot_alc, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~mot_alc,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 52,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución motivo por el cual probó por primera \nvez el alcohol por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

###¿Cuántas veces a la semana ingiere alcohol?

::: {.callout-note title="Descripción para todos los campus"}
Entre quienes consumen alcohol, el 95.5% lo hace solo los fines de semana, mientras que el 4.5% lo hace entre dos y tres veces al día. El patrón de consumo es ocasional y concentrado en los fines de semana.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuántas veces a la semana ingiere alcohol?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(alc_semana), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, alc_semana) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(alc_semana)) %>%
  count(alc_semana, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~alc_semana,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 53,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución veces a la semana ingiere \nalcohol por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Ocasiones en las cuales consume alcohol

::: {.callout-note title="Descripción para todos los campus"}
Esta nube de palabras refleja un patrón de consumo **principalmente social, familiar y orientado a eventos grupales**. Es útil para entender que, dentro de la comunidad estudiantil encuestada, el alcohol se vincula más con la vida social que con el consumo individual o por hábito.
:::

```{r, message=FALSE, warning=FALSE, echo=FALSE, fig.width=10, fig.height=6}
# Librerías necesarias
library(tm)
library(ggplot2)
library(ggwordcloud)

# Paso 1: Consolidar y limpiar texto desde la variable ocas_alc
texto <- paste(na.omit(datos$ocas_alc), collapse = " ")

# Paso 2: Crear y procesar el corpus
docs <- Corpus(VectorSource(texto))
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/|@|'|`|\\|")
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("spanish"))
docs <- tm_map(docs, removeWords, c("hogar", "tiene", "con", "sin", "etc", "por", "porque", "la", "el", "en", "de", "para", "una", "un", "es", "son", "muy", "más", "menos", "no", "mi", "los", "las", "del", "al", "se", "su", "sus", "como", "pero", "que", "le", "udes", "universidad", "santander"))
docs <- tm_map(docs, stripWhitespace)
removeSpecialChars <- function(x) gsub("[^a-zA-ZáéíóúÁÉÍÓÚñÑ0-9 ]", "", x)
docs <- tm_map(docs, content_transformer(removeSpecialChars))

# Paso 3: Crear matriz de términos y frecuencias
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)

# ✅ Paso 4: Visualizar con ggwordcloud usando colores por palabra
set.seed(123)  # para reproducibilidad
ggplot(d[1:50, ], aes(label = word, size = freq, color = word)) +
  geom_text_wordcloud_area(
    rm_outside = TRUE,
    grid_size = 2,
    shape = "circle"
  ) +
  scale_size_area(max_size = 90) +
  scale_color_manual(values = sample(colors(), 50)) +  # Paleta aleatoria
  theme_minimal()
```

## Vida sexual

### A qué edad inició su vida sexual

::: {.callout-note title="Descripción para todos los campus"}
El 43.5% de los estudiantes señaló no haber iniciado su vida sexual. Un porcentaje similar (42.4%) lo hizo entre los 14 y 17 años, mientras que el 11.7% lo hizo entre los 18 y 21 años. Los casos de inicio antes de los 13 años o después de los 22 son muy pocos. La mayoría de quienes han iniciado su vida sexual lo hizo en la adolescencia.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y A qué edad inició su vida sexual
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(edad_sex), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, edad_sex) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(edad_sex)) %>%
  count(edad_sex, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~edad_sex,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución edad de inició de su vida \nsexual por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Ha utilizado alguna vez métodos anticonceptivos?

::: {.callout-note title="Descripción para todos los campus"}
El 84.2% de los estudiantes encuestados indicó utilizar métodos anticonceptivos, frente al 15.8% que no los usa. Esto sugiere un nivel alto de conciencia sobre la protección en las relaciones sexuales entre la población estudiantil.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Ha utilizado alguna vez métodos anticonceptivos?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(anticoncep), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, anticoncep) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(anticoncep)) %>%
  count(anticoncep, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~anticoncep,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución uso de métodos \nanticonceptivos por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Metódos anticonpcetivos usados

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los estudiantes (36.3%) navega entre 1 y 3 horas diarias, seguido por un 28.1% que lo hace por más de 3 horas. Solo un 1.9% dice no usar Internet, lo que confirma su alto grado de penetración como herramienta cotidiana.
:::

```{r, message=FALSE, warning=FALSE, echo=FALSE, fig.width=10, fig.height=6}
# Librerías
library(ggplot2)
library(ggwordcloud)
library(dplyr)
library(stringr)

# Paso 1: Separar las respuestas múltiples por ';' y limpiar
# Suponiendo que la variable se llama datos$tipo_antc
palabras <- str_split(na.omit(datos$tipo_antc), ";") |> unlist()
palabras <- str_trim(palabras) # quitar espacios extra
palabras <- tolower(palabras)  # pasar a minúsculas

# Paso 2: Limpiar texto (remover palabras vacías y triviales)
palabras <- palabras[palabras != ""]
palabras <- palabras[!palabras %in% c("otros", "ninguno", "ninguna", "etc")]

# Paso 3: Crear tabla de frecuencia
df_palabras <- data.frame(word = palabras) |> 
  count(word, name = "freq") |> 
  arrange(desc(freq))

# Paso 4: Visualización con ggwordcloud
set.seed(123)
ggplot(df_palabras[1:50, ], aes(label = word, size = freq, color = word)) +
  geom_text_wordcloud_area(grid_size = 2, rm_outside = TRUE) +
  scale_size_area(max_size = 120) +
  scale_color_manual(values = sample(colors(), 50)) +
  theme_minimal()
```

### ¿De acuerdo con la definición de identidad de género, usted como se identifica?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los estudiantes se identifican como mujeres cisgénero (47.2%) y hombres cisgénero (41.2%). El 10,8% prefirió no responder. Las identidades de género diversas como no-binario (0.5%) y hombre transgénero (0.33%) están presentes, aunque en una proporción mucho menor. Esto indica una mayoría de identidad cisgénero con visibilidad de diversidades de género.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿De acuerdo con la definición de identidad de género, usted como se identifica
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(id_gen), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, id_gen) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(id_gen)) %>%
  count(id_gen, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~id_gen,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución identidad de \ngénero por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuál es su orientación sexual?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los encuestados se identifican como heterosexuales (90.5%). Las orientaciones no heterosexuales están representadas en menor proporción, destacando la orientación bisexual (5.63%) y la homosexual (1.98%). Las categorías pansexual, asexual y otras tienen frecuencias inferiores al 1.5%. Esto indica una baja diversidad de orientación sexual en la muestra o una posible subdeclaración por parte de los participantes.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuál es su orientación sexual?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(orient_sex), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, orient_sex) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(orient_sex)) %>%
  count(orient_sex, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~orient_sex,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución orientación sexual por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Estado de salud

### ¿Padece de alguna enfermedad diagnosticada que requiere tratamiento actualmente?

::: {.callout-note title="Descripción para todos los campus"}
El 7.37% de los estudiantes reportó tener alguna enfermedad diagnosticada, mientras que el 92.6% indicó no tener enfermedades.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Padece de alguna enfermedad diagnosticada que requiere tratamiento actualmente?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(enf_diag), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, enf_diag) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(enf_diag)) %>%
  count(enf_diag, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~enf_diag,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tiene alguna enfermedad \ndiagnosticada por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Indique si toma medicamentos como tratamiento de la enfermedad diagnosticada

::: {.callout-note title="Descripción para todos los campus"}
Tres de cada cuatro estudiantes (75.3%) indicaron estar tomando medicamentos. Esto contrasta con el porcentaje que reportó tener una enfermedad (7.37%), lo cual sugiere que el uso de medicamentos podría estar relacionado con condiciones no crónicas o tratamientos temporales (por ejemplo, anticonceptivos, analgésicos, suplementos, entre otros).
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Indique si toma medicamentos como tratamiento de la enfermedad diagnosticada
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(medic_enf), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, medic_enf) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(medic_enf)) %>%
  count(medic_enf, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~medic_enf,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución toma medicamentos por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Discapacidad

### Tiene alguna discapacidad

::: {.callout-note title="Descripción para todos los campus"}
El 12.5% de los encuestados reportó tener algún tipo de discapacidad, mientras que el 87.5% indicó no tener ninguna. Este valor refleja la presencia de personas con discapacidad en el entorno universitario y puede orientar estrategias de inclusión y accesibilidad.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Tiene alguna discapacidad
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(discap), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, discap) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(discap)) %>%
  count(discap, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~discap,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tiene alguna discapacidad por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Qué tipo de discapacidad posee?

::: {.callout-note title="Descripción para todos los campus"}
Del total de encuestados, el tipo de discapacidad más reportado fue la visual (9.03%), seguida por la física (1.66%) y la psicosocial (1.11%). Las discapacidades intelectual (0.396%) y auditiva (0.317%) fueron menos frecuentes.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Qué tipo de discapacidad posee?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tipo_disc), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tipo_disc) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tipo_disc)) %>%
  count(tipo_disc, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tipo_disc,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tipo de discapacidad por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```
