---
title: "Sección 1. Información personal y Académica"
---

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(readxl)
Data20252 <- read_excel("C:/R-Proyectos/Alerta1_Cx_2025-2/data/Data20252.xlsx")

View(Data20252)
datos<- Data20252

attach(datos)

# head(datos)

# str(datos)

# names(datos)

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Librerias necesarias
#install.packages(c("ggplot2", "psych", "skimr", "summarytools", "corrplot", "ggpubr", "Hmisc", "yaml"))
library(ggplot2)
library(psych)
library(skimr)
library(summarytools)
library(corrplot)
library(tidyr)
library(RColorBrewer)
library(ggpubr)
library(plotly)
library(lattice)
library(Hmisc)
library(skimr)
library(summarytools)
library(base)
library(ggpubr)
library(scales)
library(dplyr)
library(ggrepel)
library(tidyverse)
library(scales)
library(htmltools)
```

```{r, message=FALSE, warning=FALSE, echo=FALSE}
## Convertir las variables caracter a factor
# Lista de columnas que se convertirán en factores
cols_factor <- c(
  "tipo_doc", "genero", "depto", "ciudad", "barrio", "estrato...12",
  "colegio", "salud", "programa", "pensum", "jornada", "campus", 
  "prog_acad", "sexo_id", "pais", "est_civ", "ciu_orig", "desemp_aca", 
  "leng_ext", "cert_leng", "ingles", "frances", "portug", "aleman", 
  "italiano", "otra_leng", "matema", "comp_lec", "expr_oral", "acompa", 
  "tipo_acomp", "memoria", "comp", "adaptac", "atencion", "analisis", 
  "hab_pub", "est_orat", "expr_amig", "comp_nvos", "transp_hab", 
  "combust", "transp_comp", "comp_dispo", "tip_familia", "grupo_pobl", 
  "grupo_pert", "grupo_etn", "etnia_ind", "pago_sem", "eligio_udes", 
  "prim_univ", "niv_padre", "niv_madre", "internet", "tv_suscrip", 
  "esp_estud", "jorn_univ", "trab_padre", "trab_madre", "bienes_hog", 
  "remunera", "sit_ec_hog", "sust_psic", "tipo_psic", "ayuda_psic", 
  "tipo_ayuda", "fuma", "mot_fuma", "otra_resp", "alcohol", "mot_alc", 
  "ocas_alc", "anticoncep", "tipo_antc", "id_gen", "gen_otro", 
  "orient_sex", "otra_orsex", "enf_diag", "tipo_enf", "medic_enf", 
  "discap", "tipo_disc", "arte_atra", "hab_art", "tipo_art", 
  "aprend_art", "dia_art", "amb_prac", "act_fisica", "lectura", 
  "deporte", "tipo_dep", "otros_dep", "salud_ment", "apoyo_fam", 
  "red_apoyo", "pareja", "rel_pareja", "rel_padres", "fam_origen", 
  "fam_formada"
)

# Convertir solo las columnas que realmente existen
cols_existentes <- intersect(cols_factor, names(datos))
datos[cols_existentes] <- lapply(datos[cols_existentes], as.factor)
```

## Sesión. Información personal y académica

::: {.callout-warning title="Aclaración importante"}
En los gráficos y filtros, el nombre Cúcuta aparecerá como Cucuta.
:::

## Distribución geográfica

La distribución por departamentos y municipios de procedencia de los estudiantes se refleja en el mapa de Colombia.

```{r, fig.width=10, fig.height=12, echo=FALSE, message=FALSE, warning=FALSE}
library(sf)
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
library(tibble)

# Leer shapefile
colombia <- suppressMessages(
  st_read("https://raw.githubusercontent.com/santiblanko/colombia.geojson/master/mpio.json")
)

# Crear MPIO_CCDGO
colombia <- colombia %>%
  mutate(
    DPTO = str_pad(DPTO, 2, pad = "0"),
    MPIO = str_pad(MPIO, 3, pad = "0"),
    MPIO_CCDGO = paste0(DPTO, MPIO)
  ) %>%
  filter(MPIO_CCDGO != "99999")

# Leer CSV y preparar columna MPIO_CCDGO y campus
ciudades <- read_delim("data/ciudades.csv", delim = ";", locale = locale(encoding = "Latin1"))
names(ciudades) <- str_replace_all(names(ciudades), "[\r\n\t]", "")
ciudades <- ciudades %>%
  mutate(MPIO_CCDGO = str_pad(as.character(MPIO_CCDGO), 5, pad = "0"))

# Unir shapefile con CSV por MPIO_CCDGO
municipios_con_campus <- colombia %>%
  inner_join(ciudades %>% select(MPIO_CCDGO, campus), by = "MPIO_CCDGO")

# Diccionario de acrónimos (incluye CHOCÓ y SAN ANDRÉS)
acronimos_dpt <- tribble(
  ~NOMBRE_DPT,       ~ACRONIMO,
  "ANTIOQUIA",       "ANTI",
  "SANTANDER",       "SANT",
  "CESAR",           "CESA",
  "ARAUCA",          "ARAU",
  "ATLANTICO",       "ATLA",
  "BOYACA",          "BOYA",
  "CALDAS",          "CALD",
  "CAQUETA",         "CAQU",
  "CAUCA",           "CAUC",
  "CHOCÓ",           "CHOC",
  "CHOCO",           "CHOC",
  "CORDOBA",         "CORD",
  "CUNDINAMARCA",    "CUND",
  "GUAINIA",         "GUAI",
  "GUAVIARE",        "GUAV",
  "HUILA",           "HUIL",
  "LA GUAJIRA",      "GUAJ",
  "MAGDALENA",       "MAGD",
  "META",            "META",
  "NARINO",          "NARI",
  "NORTE DE SANTANDER", "NSAN",
  "PUTUMAYO",        "PUTU",
  "QUINDIO",         "QUIN",
  "RISARALDA",       "RISA",
  "SAN ANDRES",      "SAND",
  "ARCHIPIELAGO DE SAN ANDRES", "SAND",
  "SUCRE",           "SUCR",
  "TOLIMA",          "TOLI",
  "VALLE DEL CAUCA", "VALL",
  "VAUPES",          "VAUP",
  "VICHADA",         "VICH",
  "AMAZONAS",        "AMAZ",
  "BOGOTA D.C.",     "BOGO"
)

# Geometría de departamentos con acrónimos
departamentos <- colombia %>%
  group_by(DPTO, NOMBRE_DPT) %>%
  summarise(geometry = st_union(geometry), .groups = "drop") %>%
  mutate(NOMBRE_DPT = str_replace_all(NOMBRE_DPT, c("Á" = "A", "É" = "E", "Í" = "I", "Ó" = "O", "Ú" = "U", "Ñ" = "N"))) %>%
  left_join(acronimos_dpt, by = "NOMBRE_DPT") %>%
  filter(!is.na(ACRONIMO))

# 🔄 Reproyectar a coordenadas planas (MAGNA-SIRGAS / Colombia Bogotá)
colombia <- st_transform(colombia, 3116)
municipios_con_campus <- st_transform(municipios_con_campus, 3116)
departamentos <- st_transform(departamentos, 3116)

# Crear mapa
ggplot() +
  geom_sf(data = colombia, fill = "gray95", color = "white", size = 0.1) +
  geom_sf(data = municipios_con_campus, aes(fill = campus), color = "black", size = 0.2) +
  scale_fill_manual(
    values = c(
      "Cucuta" = "#FFD1DC",
      "Bucaramanga" = "#A2CFFE",
      "Valledupar" = "#AAF0D1"
    ),
    name = "Campus UDES"
  ) +
  geom_sf(data = departamentos, fill = NA, color = "black", size = 0.7) +
  geom_sf_text(data = departamentos, aes(label = ACRONIMO), size = 2, fontface = "bold", check_overlap = TRUE) +
  theme_minimal() +
  labs(
    title = "Municipios de origen de los estudiantes",
    caption = "Fuente: Dirección de Analítica Académica, 2025-1"
  )
```

## Perfil Demográfico

### Edad

::: {.callout-note title="Descripción para todos los campus"}
En términos generales, entre los estudiantes de recién ingreso a la UDES se observa que la población estudiantil es menor de 20 años. En ese sentido el 52.4% se concentra en el rango etario de 16-18 años, mientras que el 29% se ubica entre los 18-20 años. En la siguiente grafica se muestra el box plot de la edad por programas.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Cargar librerías necesarias
# install.packages(c("dplyr", "plotly")) # Descomentar si no están instaladas
library(dplyr)
library(plotly)

# Asumiendo que tu dataframe se llama 'datos'

# --- 0. Definir los campus de interés ---
# Creamos un vector con los campus que queremos incluir en el gráfico.
# El resto del código se basará en esta selección.
campus_a_incluir <- c("Bucaramanga", "Cucuta", "Valledupar")


# --- 1. Preparación y Limpieza de Datos ---
# Filtramos de una sola vez para tener una base limpia y consistente.
# **AJUSTE:** Añadimos un filtro para quedarnos solo con los campus definidos arriba.
datos_limpios <- datos %>%
  filter(
    campus %in% campus_a_incluir, # <-- LÍNEA MODIFICADA
    !is.na(edad),
    !is.na(campus),
    edad >= 14,
    edad < 40
  ) %>%
  mutate(
    grupo_edad = cut(edad, breaks = seq(14, 40, by = 2), right = FALSE)
  )

# --- 2. Cálculo de Porcentajes por Campus ---
# (Este bloque no necesita cambios)
por_campus <- datos_limpios %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# --- 3. Cálculo de Porcentajes Totales ("Todos") ---
# "Todos" ahora representará la suma de Bucaramanga, Cúcuta y Valledupar.
# (Este bloque no necesita cambios, ya que opera sobre 'datos_limpios' que ya fue filtrado)
todos <- datos_limpios %>%
  group_by(grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(
    pct = round(100 * n / sum(n), 1),
    campus = "Todos"
  )

# --- 4. Combinar Datos y Preparar para el Gráfico ---
# **AJUSTE:** Definimos manualmente el orden y contenido del menú desplegable.
niveles_ordenados <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar") # <-- LÍNEA MODIFICADA

# Unimos los datos por campus con los datos totales.
datos_final <- bind_rows(por_campus, todos) %>%
  mutate(
    campus = factor(campus, levels = niveles_ordenados),
    hover_text = paste0(
      "<b>Campus:</b> ", campus, "<br>",
      "<b>Rango de Edad:</b> ", grupo_edad, "<br>",
      "<b>Porcentaje:</b> ", pct, "%"
    )
  )

# --- 5. Creación del Gráfico Interactivo con Plotly ---
plot_ly(
  data = datos_final,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  hovertext = ~hover_text,
  hoverinfo = "text",
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = niveles_ordenados[1]
    )
  )
) %>%
  layout(
    title = list(text = "<b>Distribución Porcentual de Edad por Campus (14 a 39 años)</b>", x = 0.5),
    xaxis = list(title = "<b>Rango de Edad</b>", tickangle = -45),
    yaxis = list(title = "<b>Porcentaje (%)</b>", ticksuffix = "%"),
    # Aquí configuramos el menú desplegable.
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        # **AJUSTE:** Cambiamos las coordenadas y el anclaje para moverlo a la izquierda.
        x = 0, xanchor = "left",   # <-- LÍNEA MODIFICADA
        y = 1.2, yanchor = "top",    # <-- LÍNEA MODIFICADA
        buttons = lapply(niveles_ordenados, function(c) {
          list(
            method = "restyle",
            args = list("transforms[0].value", c),
            label = c
          )
        })
      )
    )
  )
```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# Asegurar codificación UTF-8
datos <- datos %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8", sub = "")))

# Agregar opción "Todos"
datos_todos <- datos %>%
  filter(!is.na(prog_abrev), !is.na(edad)) %>%
  mutate(campus = "Todos")

datos_final <- bind_rows(datos, datos_todos)

# Niveles de campus
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# Crear gráfico base con todas las trazas (una por campus)
fig <- plot_ly()

for (i in seq_along(niveles_campus)) {
  datos_c <- datos_final %>% filter(campus == niveles_campus[i])
  
  fig <- fig %>%
    add_boxplot(
      data = datos_c,
      x = ~prog_abrev,
      y = ~edad,
      name = niveles_campus[i],
      visible = ifelse(i == 1, TRUE, FALSE),  # Solo la primera visible
      boxpoints = "outliers",
      marker = list(color = "#6BAED6"),
      line = list(color = "#2171B5")
    )
}

# Layout con menú desplegable para filtrar por campus
fig <- fig %>%
  layout(
    title = "Distribución de edad por programa y campus",
    yaxis = list(title = "Edad"),
    xaxis = list(title = "Programa", tickangle = -45),
    showlegend = FALSE,
    updatemenus = list(
      list(
        type = "dropdown",
        direction = "down",
        x = 0.1,
        y = 1.2,
        buttons = lapply(seq_along(niveles_campus), function(i) {
          visibilidad <- rep(FALSE, length(niveles_campus))
          visibilidad[i] <- TRUE
          list(
            method = "restyle",
            args = list("visible", visibilidad),
            label = niveles_campus[i]
          )
        })
      )
    )
  )

fig

```

::: {.callout-note title="Abreviaturas de programas académicos"}
<small> <strong>ANTR</strong>: Antropología, <strong>INQU</strong>: Instrumentación Quirúrgica, <strong>MYPB</strong>: Mercadeo y Publicidad, <strong>ADFI</strong>: Administración Financiera, <strong>TEOC</strong>: Terapia Ocupacional, <strong>FONO</strong>: Fonoaudiología, <strong>FISI</strong>: Fisioterapia, <strong>ININ</strong>: Ingeniería Industrial, <strong>TCGF</strong>: Tecnología en Comunicación Gráfica, <strong>BACT</strong>: Bacteriología y Laboratorio Clínico, <strong>MEDI</strong>: Medicina, <strong>ADNI</strong>: Administración de Negocios Internacionales, <strong>INCI</strong>: Ingeniería Civil, <strong>PSIC</strong>: Psicología, <strong>LEIN</strong>: Licenciatura en Educación Infantil, <strong>ENFE</strong>: Enfermería, <strong>DERE</strong>: Derecho, <strong>MBIN</strong>: Microbiología Industrial, <strong>MEVE</strong>: Medicina Veterinaria, <strong>INAG</strong>: Ingeniería Agroindustrial, <strong>INSO</strong>: Ingeniería de Software, <strong>CONT</strong>: Contaduría Pública, <strong>TSOC</strong>: Tecnología en Supervisión de Obras Civiles, <strong>COSP</strong>: Comunicación Social y Periodismo, <strong>GEOL</strong>: Geología, <strong>ICCI</strong>: Ingeniería en Ciencias de la Computación e Inteligencia Artificial, <strong>INSI</strong>: Ingeniería de Sistemas, <strong>DIGR</strong>: Diseño Gráfico, <strong>COEX</strong>: Comercio Exterior, <strong>MVZC</strong>: Medicina Veterinaria y Zootecnia, <strong>IQBO</strong>: Instrumentación Quirúrgica (Bogotá), <strong>TLAC</strong>: Técnico Laboral en Competencias para Auxiliar de Clínica Veterinaria. </small>
:::

### Estado civil

::: {.callout-note title="Descripción para todos los campus"}
El 95.6% de estos estudiantes son solteros, lo cual representa la gran mayoría de la población estudiantil. La unión libre representa el 3.41% y los estudiantes casados constituyen apenas el 1.03%
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos (campus y estado civil)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_civ), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, est_civ) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar "Todos"
todos <- datos %>%
  filter(!is.na(est_civ)) %>%
  count(est_civ, name = "n") %>%
  mutate(campus = "Todos")

# 3. Unir todos
datos_final <- bind_rows(datos_plot, todos)

# 4. Lista de campus
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 5. Paleta pastel (tantos colores como categorías de estado civil)
colores_pastel <- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = "Pastel1")

# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial
fig <- plot_ly(type = "pie")

for (i in seq_along(niveles_campus)) {
  datos_c <- datos_final %>% filter(campus == niveles_campus[i])
  
  fig <- fig %>% add_trace(
    labels = datos_c$est_civ,
    values = datos_c$n,
    type = "pie",
    name = niveles_campus[i],
    visible = ifelse(i == 1, TRUE, FALSE),
    textinfo = "label+percent",
    hoverinfo = "label+percent+value",
    sort = FALSE,
    marker = list(colors = colores_pastel),
    direction = "clockwise",
    rotation = 90
  )
}

# 7. Layout con menú desplegable
fig <- fig %>% layout(
  title = "Distribución del estado civil por campus",
  showlegend = TRUE,
  updatemenus = list(list(
    type = "dropdown",
    direction = "down",
    x = 0.1, y = 1.2,
    buttons = lapply(seq_along(niveles_campus), function(i) {
      visibilidad <- rep(FALSE, length(niveles_campus))
      visibilidad[i] <- TRUE
      list(method = "restyle",
           args = list("visible", visibilidad),
           label = niveles_campus[i])
    })
  ))
)

fig
```

### Sexo

::: {.callout-note title="Descripción para todos los campus"}
En relación con el sexo, el 61.5% de los participantes eran mujeres y el 38.5% eran hombres.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y sexo
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(genero), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, genero) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(genero)) %>%
  count(genero, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~genero,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del sexo por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Pais de origen

::: {.callout-note title="Descripción para todos los campus"}
La gráfica presenta la distribución porcentual de estudiantes según su país de origen. La población estudiantil es predominantemente colombiana (96.4%), mientras que al realizar un filtro y seleccionar solo los estudiantes extranjeros se distribuyen de la siguiente manera: venezolanos 80.4%, españoles 6.52%, mexicanos 6.52%, ecuatorianos 4.32% y estadounidenses 2.17%.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(pais), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, pais) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar "Todos"
todos <- datos %>%
  filter(!is.na(pais)) %>%
  count(pais, name = "n") %>%
  mutate(campus = "Todos")

# 3. Definir el orden específico de campus
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todo y ordenar por el factor
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear lista ordenada de campus para el dropdown
campus_ordenados <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 6. Pie chart con filtro por campus
plot_ly(
  data = datos_final,
  labels = ~pais,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del país de origen por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,  # Primera opción activa (Todos)
        buttons = lapply(campus_ordenados, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )
```

## Dificultades

### Habilidades académicas

::: {.callout-note title="Descripción para todos los campus"}
El grado de dificultad que presentaron los estudiantes durante la educación básica y media en las siguientes áreas Matemáticas, Comprensión Lectora y Expresión Oral fue. En **Matemáticas**, la mayoría de los estudiantes se ubicó en un nivel medio de dificultad (53.3%), seguido por un nivel alto (29.6%) y un nivel bajo (11.3%). En **Expresión Oral**, predomina también el nivel medio (40.6%), seguido por el nivel alto (32.3%) y el nivel bajo (13.1%). En **Comprensión Lectora**, destaca el nivel alto con el mayor porcentaje (42.3%), mientras que solo el 10.4% reportó un nivel bajo de dificultad.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(plotly)
library(dplyr)

# Preparar los datos eliminando NA
datos_limpios <- datos %>%
  filter(!is.na(matema) & !is.na(comp_lec) & !is.na(expr_oral) & !is.na(campus))

# Obtener lista única de campus
campus_list <- unique(datos_limpios$campus)

# Función para crear gráficos por campus
create_pie_charts <- function(campus_selected) {
  # Filtrar datos por campus
  datos_campus <- datos_limpios %>%
    filter(campus == campus_selected)
  
  # Contar frecuencias para cada variable
  matema_counts <- datos_campus %>% count(matema)
  comp_lec_counts <- datos_campus %>% count(comp_lec) 
  expr_oral_counts <- datos_campus %>% count(expr_oral)
  
  # Crear la figura
  fig <- plot_ly()
  
  # Agregar gráfico de pie para Matemáticas
  fig <- fig %>% 
    add_pie(data = matema_counts, 
            labels = ~matema, 
            values = ~n,
            name = "Matemáticas", 
            domain = list(x = c(0, 0.4), y = c(0.4, 1)),
            textinfo = 'label+percent',
            textposition = 'inside',
            hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>")
  
  # Agregar gráfico de pie para Comprensión Lectora
  fig <- fig %>% 
    add_pie(data = comp_lec_counts, 
            labels = ~comp_lec, 
            values = ~n,
            name = "Comprensión Lectora", 
            domain = list(x = c(0.6, 1), y = c(0.4, 1)),
            textinfo = 'label+percent',
            textposition = 'inside',
            hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>")
  
  # Agregar gráfico de pie para Expresión Oral
  fig <- fig %>% 
    add_pie(data = expr_oral_counts, 
            labels = ~expr_oral, 
            values = ~n,
            name = "Expresión Oral", 
            domain = list(x = c(0.25, 0.75), y = c(0, 0.6)),
            textinfo = 'label+percent',
            textposition = 'inside',
            hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>")
  
  return(fig)
}

# Crear datos para todos los campus (incluyendo "Todos" primero)
all_campus_data <- datos_limpios %>%
  count(matema, comp_lec, expr_oral, campus)

# Crear lista de botones para el dropdown con "Todos" primero
dropdown_buttons <- list()

# Botón "Todos" - mostrar datos de todos los campus
dropdown_buttons[[1]] <- list(
  method = "restyle",
  args = list(list(
    "labels" = list(
      datos_limpios %>% count(matema) %>% pull(matema),
      datos_limpios %>% count(comp_lec) %>% pull(comp_lec),
      datos_limpios %>% count(expr_oral) %>% pull(expr_oral)
    ),
    "values" = list(
      datos_limpios %>% count(matema) %>% pull(n),
      datos_limpios %>% count(comp_lec) %>% pull(n),
      datos_limpios %>% count(expr_oral) %>% pull(n)
    )
  )),
  label = "Todos"
)

# Botones para cada campus específico
for(i in seq_along(campus_list)) {
  campus_data <- datos_limpios %>% filter(campus == campus_list[i])
  
  dropdown_buttons[[i + 1]] <- list(
    method = "restyle",
    args = list(list(
      "labels" = list(
        campus_data %>% count(matema) %>% pull(matema),
        campus_data %>% count(comp_lec) %>% pull(comp_lec),
        campus_data %>% count(expr_oral) %>% pull(expr_oral)
      ),
      "values" = list(
        campus_data %>% count(matema) %>% pull(n),
        campus_data %>% count(comp_lec) %>% pull(n),
        campus_data %>% count(expr_oral) %>% pull(n)
      )
    )),
    label = campus_list[i]
  )
}

# Crear figura inicial con todos los datos
fig <- plot_ly()

# Datos iniciales (todos los campus)
matema_counts_all <- datos_limpios %>% count(matema)
comp_lec_counts_all <- datos_limpios %>% count(comp_lec)
expr_oral_counts_all <- datos_limpios %>% count(expr_oral)

# Usar paleta Pastel1 de RColorBrewer
library(RColorBrewer)
colores_suaves <- brewer.pal(9, "Pastel1")

# Agregar los tres gráficos de pie
fig <- fig %>% 
  add_pie(data = matema_counts_all, 
          labels = ~matema, 
          values = ~n,
          name = "Matemáticas", 
          domain = list(x = c(0, 0.4), y = c(0.4, 1)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 12, family = "Arial"),
          marker = list(colors = colores_suaves, 
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  add_pie(data = comp_lec_counts_all, 
          labels = ~comp_lec, 
          values = ~n,
          name = "Comprensión Lectora", 
          domain = list(x = c(0.6, 1), y = c(0.4, 1)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 12, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  add_pie(data = expr_oral_counts_all, 
          labels = ~expr_oral, 
          values = ~n,
          name = "Expresión Oral", 
          domain = list(x = c(0.25, 0.75), y = c(0, 0.6)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 12, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>")

# Configurar layout con dropdown
fig <- fig %>% 
  layout(
    title = list(
      text = "Distribución de Competencias Académicas por Campus",
      x = 0.5,
      font = list(size = 16)
    ),
    showlegend = FALSE,
    xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    annotations = list(
      list(x = 0.2, y = 1.05, text = "Matemáticas", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.8, y = 1.05, text = "Comprensión Lectora", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.5, y = 0.65, text = "Expresión Oral", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial"))
    ),
    updatemenus = list(
      list(
        type = "dropdown",
        direction = "down",
        x = 0.7, y = 1.2,
        buttons = dropdown_buttons,
        showactive = TRUE,
        bgcolor = "#F8F9FA",
        bordercolor = "#495057",
        font = list(size = 12, color = "black", family = "Arial")
      )
    ),
    margin = list(t = 120, b = 50, l = 50, r = 50)
  )

# Mostrar el gráfico
fig
```

### Habilidades cognitivas

::: {.callout-note title="Descripción para todos los campus"}
Los estudiantes reportaron dificultades significativas en diversas habilidades cognitivas, especialmente en **análisis** (37.6%), **comprensión** (36.4%), **atención** (37.3%), **memoria (37%)** y, en menor medida, en **adaptación** (29.6%). Estos resultados evidencian áreas clave que requieren atención para fortalecer los procesos de aprendizaje y desempeño académico.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(plotly)
library(dplyr)

# Preparar los datos eliminando NA
datos_limpios <- datos %>%
  filter(!is.na(memoria) & !is.na(comp) & !is.na(adaptac) & !is.na(atencion) & !is.na(analisis) & !is.na(campus))

# Obtener lista única de campus
campus_list <- unique(datos_limpios$campus)

# Función para crear gráficos por campus
create_pie_charts <- function(campus_selected) {
  # Filtrar datos por campus
  datos_campus <- datos_limpios %>%
    filter(campus == campus_selected)
  
  # Contar frecuencias para cada variable
  memoria_counts <- datos_campus %>% count(memoria)
  comp_counts <- datos_campus %>% count(comp) 
  adaptac_counts <- datos_campus %>% count(adaptac)
  atencion_counts <- datos_campus %>% count(atencion)
  analisis_counts <- datos_campus %>% count(analisis)
  
  return(list(memoria_counts, comp_counts, adaptac_counts, atencion_counts, analisis_counts))
}

# Crear datos para todos los campus (incluyendo "Todos" primero)
all_campus_data <- datos_limpios %>%
  count(memoria, comp, adaptac, atencion, analisis, campus)

# Crear lista de botones para el dropdown con "Todos" primero
dropdown_buttons <- list()

# Botón "Todos" - mostrar datos de todos los campus
dropdown_buttons[[1]] <- list(
  method = "restyle",
  args = list(list(
    "labels" = list(
      datos_limpios %>% count(memoria) %>% pull(memoria),
      datos_limpios %>% count(comp) %>% pull(comp),
      datos_limpios %>% count(adaptac) %>% pull(adaptac),
      datos_limpios %>% count(atencion) %>% pull(atencion),
      datos_limpios %>% count(analisis) %>% pull(analisis)
    ),
    "values" = list(
      datos_limpios %>% count(memoria) %>% pull(n),
      datos_limpios %>% count(comp) %>% pull(n),
      datos_limpios %>% count(adaptac) %>% pull(n),
      datos_limpios %>% count(atencion) %>% pull(n),
      datos_limpios %>% count(analisis) %>% pull(n)
    )
  )),
  label = "Todos"
)

# Botones para cada campus específico
for(i in seq_along(campus_list)) {
  campus_data <- datos_limpios %>% filter(campus == campus_list[i])
  
  dropdown_buttons[[i + 1]] <- list(
    method = "restyle",
    args = list(list(
      "labels" = list(
        campus_data %>% count(memoria) %>% pull(memoria),
        campus_data %>% count(comp) %>% pull(comp),
        campus_data %>% count(adaptac) %>% pull(adaptac),
        campus_data %>% count(atencion) %>% pull(atencion),
        campus_data %>% count(analisis) %>% pull(analisis)
      ),
      "values" = list(
        campus_data %>% count(memoria) %>% pull(n),
        campus_data %>% count(comp) %>% pull(n),
        campus_data %>% count(adaptac) %>% pull(n),
        campus_data %>% count(atencion) %>% pull(n),
        campus_data %>% count(analisis) %>% pull(n)
      )
    )),
    label = campus_list[i]
  )
}

# Crear figura inicial con todos los datos
fig <- plot_ly()

# Datos iniciales (todos los campus)
memoria_counts_all <- datos_limpios %>% count(memoria)
comp_counts_all <- datos_limpios %>% count(comp)
adaptac_counts_all <- datos_limpios %>% count(adaptac)
atencion_counts_all <- datos_limpios %>% count(atencion)
analisis_counts_all <- datos_limpios %>% count(analisis)

# Usar paleta Pastel1 de RColorBrewer
library(RColorBrewer)
colores_suaves <- brewer.pal(9, "Pastel1")

# Agregar los cinco gráficos de pie
fig <- fig %>% 
  # Memoria (arriba izquierda)
  add_pie(data = memoria_counts_all, 
          labels = ~memoria, 
          values = ~n,
          name = "Memoria", 
          domain = list(x = c(0, 0.45), y = c(0.55, 1)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 10, family = "Arial"),
          marker = list(colors = colores_suaves, 
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  # Comp (arriba derecha)
  add_pie(data = comp_counts_all, 
          labels = ~comp, 
          values = ~n,
          name = "Comp", 
          domain = list(x = c(0.55, 1), y = c(0.55, 1)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 10, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  # Adaptac (centro)
  add_pie(data = adaptac_counts_all, 
          labels = ~adaptac, 
          values = ~n,
          name = "Adaptac", 
          domain = list(x = c(0.275, 0.725), y = c(0.275, 0.725)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 10, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  # Atencion (abajo izquierda)
  add_pie(data = atencion_counts_all, 
          labels = ~atencion, 
          values = ~n,
          name = "Atención", 
          domain = list(x = c(0, 0.45), y = c(0, 0.45)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 10, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>") %>%
  # Analisis (abajo derecha)
  add_pie(data = analisis_counts_all, 
          labels = ~analisis, 
          values = ~n,
          name = "Análisis", 
          domain = list(x = c(0.55, 1), y = c(0, 0.45)),
          textinfo = 'label+percent',
          textposition = 'inside',
          textfont = list(color = "black", size = 10, family = "Arial"),
          marker = list(colors = colores_suaves,
                       line = list(color = "white", width = 2)),
          hovertemplate = "<b>%{label}</b><br>Cantidad: %{value}<br>Porcentaje: %{percent}<extra></extra>")

# Configurar layout con dropdown
fig <- fig %>% 
  layout(
    title = list(
      text = "Distribución de Variables Cognitivas por Campus",
      x = 0.5,
      font = list(size = 18, family = "Arial")
    ),
    showlegend = FALSE,
    xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    annotations = list(
      list(x = 0.225, y = 1.05, text = "Memoria", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.775, y = 1.05, text = "Comprensión", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.5, y = 0.75, text = "Adaptación", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.225, y = 0.5, text = "Atención", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      list(x = 0.775, y = 0.5, text = "Análisis", showarrow = FALSE, 
           font = list(size = 14, color = "black", family = "Arial")),
      # Etiqueta para el dropdown
      list(x = 0.02, y = 1.15, text = "Campus:", showarrow = FALSE, 
           font = list(size = 12, color = "black", family = "Arial"))
    ),
    updatemenus = list(
      list(
        type = "dropdown",
        direction = "down",
        x = 0.15, y = 1.15,
        xanchor = 'left',
        buttons = dropdown_buttons,
        showactive = TRUE,
        bgcolor = "#F8F9FA",
        bordercolor = "#495057",
        font = list(size = 11, color = "black", family = "Arial")
      )
    ),
    margin = list(t = 100, b = 50, l = 50, r = 50)
  )

# Mostrar el gráfico
fig
```

## Desempeño académico en el colegio

::: {.callout-note title="Descripción para todos los campus"}
El 70% de los encuestados describieron su desempeño académico como bueno, el 23.9% como excelente, y solo el 6.0% lo calificó como regular.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y desempeño académico
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(desemp_aca), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, desemp_aca) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(desemp_aca)) %>%
  count(desemp_aca, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~desemp_aca,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del desempeño académico por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

## Lenguas extranjeras

::: {.callout-note title="Descripción para todos los campus"}
El 21.9% de los encuestados señalaron tener dominio de una lengua extranjera.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y lenguas extranjeras
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(leng_ext), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, leng_ext) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(leng_ext)) %>%
  count(leng_ext, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~leng_ext,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del manejo de \nlenguas extranjeras por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Distribución de niveles de idiomas

::: {.callout-note title="Descripción para todos los campus"}
En relación con el dominio de una segunda lengua extranjera, el 12,5% de los estudiantes manifiestan dominar el idioma inglés en diferentes niveles.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(knitr)
library(kableExtra)

# Crear tabla de idiomas de forma simple
crear_tabla_idiomas <- function(datos) {
  
  # Definir columnas de idiomas y sus nombres
  idiomas_info <- data.frame(
    columna = c("ingles", "frances", "portug", "aleman", "italiano", "otra_leng"),
    nombre = c("Inglés", "Francés", "Portugués", "Alemán", "Italiano", "Otra"),
    stringsAsFactors = FALSE
  )
  
  # Verificar qué columnas existen
  columnas_existentes <- idiomas_info$columna[idiomas_info$columna %in% colnames(datos)]
  
  if(length(columnas_existentes) == 0) {
    return(data.frame(Mensaje = "No se encontraron columnas de idiomas en los datos"))
  }
  
  # Inicializar tabla resultado
  resultado <- data.frame(
    Idioma = character(),
    A1 = integer(),
    A2 = integer(),
    B1 = integer(),
    B2 = integer(),
    C1 = integer(),
    C2 = integer(),
    Total = integer(),
    Porcentaje = character(),
    stringsAsFactors = FALSE
  )
  
  # Procesar cada idioma
  for(col in columnas_existentes) {
    # Obtener nombre del idioma
    nombre_idioma <- idiomas_info$nombre[idiomas_info$columna == col]
    
    # Obtener datos válidos (no NA)
    datos_validos <- datos[[col]][!is.na(datos[[col]])]
    
    # Contar cada nivel
    count_A1 <- sum(datos_validos == "A1", na.rm = TRUE)
    count_A2 <- sum(datos_validos == "A2", na.rm = TRUE)
    count_B1 <- sum(datos_validos == "B1", na.rm = TRUE)
    count_B2 <- sum(datos_validos == "B2", na.rm = TRUE)
    count_C1 <- sum(datos_validos == "C1", na.rm = TRUE)
    count_C2 <- sum(datos_validos == "C2", na.rm = TRUE)
    
    # Calcular total
    total_idioma <- count_A1 + count_A2 + count_B1 + count_B2 + count_C1 + count_C2
    
    # Calcular porcentaje del total de la muestra
    total_muestra <- nrow(datos)
    porcentaje <- round((total_idioma / total_muestra) * 100, 1)
    
    # Crear fila
    nueva_fila <- data.frame(
      Idioma = nombre_idioma,
      A1 = count_A1,
      A2 = count_A2,
      B1 = count_B1,
      B2 = count_B2,
      C1 = count_C1,
      C2 = count_C2,
      Total = total_idioma,
      Porcentaje = paste0(porcentaje, "%"),
      stringsAsFactors = FALSE
    )
    
    # Agregar a resultado
    resultado <- rbind(resultado, nueva_fila)
  }
  
  return(resultado)
}

# Crear la tabla (sin mostrar mensajes intermedios)
tabla_final <- crear_tabla_idiomas(datos)

# Mostrar solo la tabla final con formato
if("Mensaje" %in% colnames(tabla_final)) {
  kable(tabla_final) %>%
    kable_styling(bootstrap_options = c("striped", "hover"))
} else if(nrow(tabla_final) > 0) {
  kable(tabla_final, 
        caption = "Distribución de Niveles de Idiomas",
        align = c('l', rep('c', 7), 'c')) %>%
    kable_styling(
      bootstrap_options = c("striped", "hover", "condensed", "responsive"),
      full_width = FALSE,
      position = "center"
    ) %>%
    add_header_above(c(" " = 1, "Niveles de Competencia" = 6, "Resumen" = 2)) %>%
    row_spec(0, bold = TRUE, background = "#f8f9fa") %>%
    column_spec(1, bold = TRUE, background = "#f8f9fa") %>%
    column_spec(8:9, bold = TRUE, background = "#e8f4fd")
}

```

## Habilidades de comunicación y Socialización

### Cuándo hablo en público, generalmente me siento:

::: {.callout-note title="Descripción para todos los campus"}
El sentimiento predominante es el nerviosismo, con un 46.5% de los estudiantes Cuando hablan en público. En segundo lugar, se encuentran las emociones de tensión y tranquilidad, con un 21.6% y un 21% respectivamente. Finalmente, solo un 10.9% de los encuestados se siente seguro o confiado al hablar en público.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Cuándo hablo en público
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(hab_pub), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, hab_pub) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(hab_pub)) %>%
  count(hab_pub, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~hab_pub,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución Cuándo \nhablo en público por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿He realizado estudios de oratoria?

::: {.callout-note title="Descripción para todos los campus"}
De los estudiantes encuestados, el 87.7% indicaron no haber tomado cursos de oratoria, mientras que alrededor del 12.3% sí los han realizado.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y He realizado estudios de oratoria
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_orat), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, est_orat) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(est_orat)) %>%
  count(est_orat, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~est_orat,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de he realizado \nestudios de oratoria por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Me siento cómodo en mi grupo de amigos y me expreso abiertamente?

::: {.callout-note title="Descripción para todos los campus"}
En lo que respecta a la interacción social, la gran mayoría de los estudiantes (92.5%) se sienten cómodos y se expresan abiertamente dentro de su grupo de amigos, mientras que una minoría (7.53%) no experimenta la misma comodidad.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Me siento cómodo en mi grupo de amigos
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(expr_amig), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, expr_amig) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(expr_amig)) %>%
  count(expr_amig, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~expr_amig,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución me siento cómodo \nen mi grupo de amigos por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Cuando conozco nuevas personas, mi comportamiento es:

::: {.callout-note title="Descripción para todos los campus"}
En lo que respecta a la interacción con personas desconocidas, casi la mitad de los estudiantes (49.1%) toman la iniciativa para iniciar una conversación al conocer a nuevas personas. Por otro lado, un porcentaje considerable (38.9%) prefiere esperar a que sean los otros quienes comiencen la interacción. Un grupo más pequeño (9.83%) indica que, en estas situaciones, solo escuchan sin hablar, y una minoría muy reducida (2.14%) evita completamente hablar con personas que no conocen.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Cuando conozco nuevas personas
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(comp_nvos), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, comp_nvos) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(comp_nvos)) %>%
  count(comp_nvos, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~comp_nvos,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de cuando conozco \nnuevas personas por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```
